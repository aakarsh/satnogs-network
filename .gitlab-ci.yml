variables:
  GITLAB_CI_IMAGE_ALPINE: 'alpine:3.9'
  GITLAB_CI_IMAGE_DOCKER: 'docker:19.03.12'
  GITLAB_CI_IMAGE_NODE: 'node:13.12'
  GITLAB_CI_IMAGE_PYTHON: 'python:3.8'
  GITLAB_CI_PYPI_DOCKER_COMPOSE: 'docker-compose~=1.23.0'
  GITLAB_CI_PYPI_TOX: 'tox~=3.14.0'
stages:
  - static
  - build
  - test
  - deploy
  - trigger
  - security

# 'static' stage
static_js_css:
  stage: static
  image: ${GITLAB_CI_IMAGE_NODE}
  script:
    - npm ci
    - node_modules/.bin/gulp
  artifacts:
    expire_in: 1 week
    when: always
    paths:
      - network/static/lib
static:
  stage: static
  image: ${GITLAB_CI_IMAGE_PYTHON}
  before_script:
    - pip install "$GITLAB_CI_PYPI_TOX"
  script:
    - tox -e "flake8,isort,yapf,pylint"

# 'build' stage
docs:
  stage: build
  image: ${GITLAB_CI_IMAGE_PYTHON}
  before_script:
    - pip install "$GITLAB_CI_PYPI_TOX"
  script:
    - rm -rf docs/_build
    - tox -e "docs"
  artifacts:
    expire_in: 1 week
    when: always
    paths:
      - docs/_build/html
build:
  stage: build
  image: ${GITLAB_CI_IMAGE_PYTHON}
  before_script:
    - pip install "$GITLAB_CI_PYPI_TOX"
  script:
    - rm -rf dist
    - tox -e build
  artifacts:
    expire_in: 1 week
    when: always
    paths:
      - dist

# 'test' stage
test:
  stage: test
  image: ${GITLAB_CI_IMAGE_PYTHON}
  before_script:
    - pip install "$GITLAB_CI_PYPI_TOX"
    - apt-get update
    - apt-get install -y ruby-sass
  script:
    - tox -e deps,pytest

# 'deploy' stage
docker:
  stage: deploy
  image: ${GITLAB_CI_IMAGE_DOCKER}
  services:
    - ${GITLAB_CI_IMAGE_DOCKER}-dind
  before_script:
    - apk --update add py-pip
    - pip install "$GITLAB_CI_PYPI_DOCKER_COMPOSE"
  script:
    - |
      [ -z "$CI_REGISTRY_IMAGE" ] || {
          CACHE_IMAGE="$CI_REGISTRY_IMAGE/satnogs-network:$CI_COMMIT_REF_NAME"
          [ -z "$CI_COMMIT_TAG" ] || CACHE_IMAGE="$CI_REGISTRY_IMAGE/satnogs-network:latest"
          export CACHE_IMAGE
      }
    - docker-compose -f docker-compose.yml -f docker-compose.cache.yml pull cache_image || true
    - docker-compose -f docker-compose.yml -f docker-compose.cache.yml build --pull
    - |
      [ -z "$CI_REGISTRY_IMAGE" ] || {
          docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
          docker tag satnogs-network:latest $CI_REGISTRY_IMAGE/satnogs-network:$CI_COMMIT_REF_NAME
          docker push $CI_REGISTRY_IMAGE/satnogs-network:$CI_COMMIT_REF_NAME
          [ -z "$CI_COMMIT_TAG" ] || {
              docker tag satnogs-network:latest $CI_REGISTRY_IMAGE/satnogs-network:latest
              docker push $CI_REGISTRY_IMAGE/satnogs-network:latest
          }
      }
      [ -z "$DOCKERHUB_PASSWORD" ] || {
          docker login -u $DOCKERHUB_USER -p $DOCKERHUB_PASSWORD
          docker tag satnogs-network:latest librespace/satnogs-network:$CI_COMMIT_REF_NAME
          docker push librespace/satnogs-network:$CI_COMMIT_REF_NAME
          [ -z "$CI_COMMIT_TAG" ] || {
              docker tag satnogs-network:latest librespace/satnogs-network:latest
              docker push librespace/satnogs-network:latest
          }
      }
  only:
    refs:
      - master
      - tags
deploy:
  stage: deploy
  image: ${GITLAB_CI_IMAGE_PYTHON}
  before_script:
    - pip install "$GITLAB_CI_PYPI_TOX"
  script:
    - rm -rf dist
    - tox -e "upload"
  only:
    refs:
      - tags
    variables:
      - $PYPI_USERNAME
      - $PYPI_PASSWORD
  except:
    - triggers
pages:
  stage: deploy
  image: ${GITLAB_CI_IMAGE_ALPINE}
  script:
    - mv docs/_build/html/ public/
  artifacts:
    paths:
      - public
  only:
    - tags

# 'trigger' stage
trigger_master:
  stage: trigger
  image: ${GITLAB_CI_IMAGE_ALPINE}
  before_script:
    - apk add --no-cache curl
  script:
    - for trigger in $PIPELINE_TRIGGERS_MASTER; do curl -X POST "$trigger"; done
  only:
    refs:
      - master
    variables:
      - $PIPELINE_TRIGGERS_MASTER
trigger_latest:
  stage: trigger
  image: ${GITLAB_CI_IMAGE_ALPINE}
  before_script:
    - apk add --no-cache curl
  script:
    - for trigger in $PIPELINE_TRIGGERS_LATEST; do curl -X POST "$trigger"; done
  only:
    refs:
      - tags
    variables:
      - $PIPELINE_TRIGGERS_LATEST

# 'security' stage
include:
  - template: Container-Scanning.gitlab-ci.yml
  - template: Dependency-Scanning.gitlab-ci.yml
  - template: SAST.gitlab-ci.yml
container_scanning:
  stage: security
  variables:
    CI_APPLICATION_REPOSITORY: ${CI_REGISTRY_IMAGE}/satnogs-network
    CI_APPLICATION_TAG: ${CI_COMMIT_REF_NAME}
  rules:
    - if: $CI_REGISTRY_IMAGE && $CI_COMMIT_BRANCH == "master"
    - if: $CI_REGISTRY_IMAGE && $CI_COMMIT_TAG
dependency_scanning:
  stage: security
  variables:
    DS_DISABLE_DIND: 'true'
    DS_DEFAULT_ANALYZERS: 'gemnasium,gemnasium-python,retire.js'
gemnasium-python-dependency_scanning:
  before_script:
    - apt-get -q update
    - apt-get -qy install libmariadb-dev python3-pil libjpeg-dev
sast:
  stage: security
